MQTT on Android - 40 min talk by Marcus Schlechter and Uwe Post - Abstract

The presentation is all about MQTT, how to implement and use the publish/subscribe pattern within the mobile world . 
The main focused audience are developers who recently rely on the request response paradigm for their realtime use cases.

The main objective of this presentation is to dive into the approach for certain use cases to use the MQTT Protocol
within android applications and show how this technology has its strength bridge and evolves the internet of things.
Furthermore the audience is guided whats the novelty and what is the specialty about this Protocol.

Within this presentation the audience will be introduced to the basic key facts about MQTT, where it has its origin, 
where it could be the better choice instead of using the well known and commonly used request/response pattern.
The speaker will show the simplicity of how to setup your own broker, what other serverside frameworks like apache camel can be used. Bringing the essential benefit in terms full controll of the publish and subscribe communication flow.
Further more terms like "broker, last will, retained messages, client IDS , stable on unstable networks, control on privacy, fire and forget "
will be explained with a simple dive in examples to the audience.
Both sides of the story,server side and client side, will be explained by a practical android showcase.

At last a Brief forecast will be given, what will be in the future and what can be done now , how to setup mosquito or using ActiveMQ with e.g apache camel.




- Introduction: What is MQTT?
 + publisher/subscriber pattern
 + fits on certain use cases where requeset response pattern is not the right choice
 + battery savings 
 + Internet of Things
 + using scalable broker on central server and any number of low end clients
 + publish any type of data to a "topic" to a central broker
 + clients subscribe to a topic and receive published data wherever they are
 + last will
 + retained messages
 + client IDs
 + works on unstable networks
 + different brokers available including Mosquitto (Open Source) and Enterprise level solutions with high scalability
 + client implementations available for nearly all platforms and languages including Android, raspberry pi, Arduino...
- MQTT compared to Google Cloud Messaging, ActiveMQ, Spdy etc
 + you are in control (privacy, terms of service, end-to-end encryption possible)
 + easy setup of the broker (i.e. apt-get install mosquitto on Debian)
 + low learning curve
 + slim protocol
 + spdy / quic / http2.0 are still not final. Need to have dedicated apache server, thus more complex to maintain.
 + easy to integrate within apache camel component already available. (works with mosquito / activeMQ)
- Eclipse Paho: MQTT clients also for Android
 + How to use with Android Studio (using gradle and the eclipse maven repo)
 + Simple showcase of a messenger app
 + Code samples (async)
 + Simple showcase using Android Wear (monitor your grandpa's heartbeat)
 + together with locationupdates interessting use cases/
 + Other applications ("Kick it out" multiplayer football manager,  FB messenger)
- Q&A

About us:
Marcus Schlechter is technical architect, reviewer of Uwe Post's litrature and companion on poc and prototypes 
Uwe Post wrote two Books for Android Developers and is lead game developer at Ludetis.



Mosquitto - freier MQTT Broker
- easy 2 install
- integrierbar in apache camel, einfache dsl (EIP)


- was ist das besondere
- ganz viele Apps. 1 centraler Server auf push basis
- 1 Google Pushservice (Nutzungsbedingungen, keine Kontrolle, irgendwann kostet was, privacy, end2End encrytion -key, tls etc)
- MQTT laeuft auf jedem dedicated server
- Fire and forget (QOS 0 ) (QOS 2 werden sicher die Nachrichten zugestellt)
- beliebige Daten.
- Platform unabhaengig , Implementierungen sind manigfaeltig vorhanden
- ....

- Wie verhaelt sich das unter Last
- gibt es dieselben Probleme wie in der alten Topic / publish & subscribe Welt
- Vergleich (QUIC, SPDY , HTTP2.0)
- Erklaerung der Code Schnipsel
- KickItOut seit 5 Jahren evtl. Loesung fuer eine Pushservice
- easy to setup Dev env within Android study due to eclipse maven repo
- keine Notwendigkeit sich im Race Conditions , Synchronisation, Handler, CallBackHell.

-- SERVER Side 
- works with brokers wie ActiveMQ und Mosquito.
- eigene Server seitige Anwendungen koennen Apache Camel benutzen. Hier gibt es auch eine MQTT component. 
# http://camel.apache.org/mqtt.html

